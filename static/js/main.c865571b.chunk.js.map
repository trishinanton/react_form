{"version":3,"sources":["Input.tsx","Birthday.tsx","Gender.tsx","Btn.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","props","useState","value","setValue","Grid","item","style","padding","TextField","required","label","defaultValue","variant","onChange","e","currentTarget","setChange","Birthday","React","Date","selectedDate","setSelectedDate","utils","DateFnsUtils","margin","id","format","date","KeyboardButtonProps","Gender","FormControl","component","FormLabel","RadioGroup","aria-label","name","event","target","FormControlLabel","control","Radio","Btn","Button","color","endIcon","onClick","console","log","DataConsoleLog","App","setName","surname","setSurname","company","setCompany","birthday","setBirthday","gender","setGender","serials","setSerials","hobby","setHobby","Container","fixed","container","direction","justifyContent","alignItems","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kNAUO,SAASA,EAAMC,GAClB,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAcA,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,MAAO,CAACC,QAAQ,SACvB,kBAACC,EAAA,EAAD,CAEIC,UAAQ,EACRC,MAAOV,EAAMU,MACbC,aAAa,GACbC,QAAQ,WACRV,MAASA,EACTW,SAtBQ,SAACC,GACjBX,EAASW,EAAEC,cAAcb,OACzBF,EAAMgB,UAAUF,EAAEC,cAAcb,W,6BCJjC,SAASe,EAASjB,GAErB,MAAwCkB,IAAMjB,SAC1C,IAAIkB,KAAK,wBADb,mBAAOC,EAAP,KAAqBC,EAArB,KAQA,OACI,kBAACjB,EAAA,EAAD,CAAMC,MAAI,EAACC,MAAO,CAACC,QAAQ,SACvB,kBAAC,IAAD,CAAyBe,MAAOC,KAC5B,kBAAC,IAAD,CACIC,OAAO,SACPC,GAAG,qBACHf,MAAOV,EAAMU,MACbgB,OAAO,aACPxB,MAAOkB,EACPP,SAbS,SAACc,GACtBN,EAAgBM,GAChB3B,EAAMgB,UAAUI,IAYJQ,oBAAqB,CACjB,aAAc,mB,iDCzB/B,SAASC,EAAO7B,GACnB,MAA0BkB,IAAMjB,SAAS,UAAzC,mBAAOC,EAAP,KAAcC,EAAd,KAMA,OACI,kBAACC,EAAA,EAAD,CAAMC,MAAI,EAACC,MAAO,CAACC,QAAQ,SACvB,kBAACuB,EAAA,EAAD,CAAaC,UAAU,YACnB,kBAACC,EAAA,EAAD,CAAWD,UAAU,UAArB,UACA,kBAACE,EAAA,EAAD,CAAYC,aAAW,SAASC,KAAK,UAAUjC,MAAOA,EAAOW,SARpD,SAACuB,GAClBjC,EAAUiC,EAAMC,OAA4BnC,OAC5CF,EAAMgB,UAAUoB,EAAMrB,cAAcb,SAOxB,kBAACoC,EAAA,EAAD,CAAkBpC,MAAM,SAASqC,QAAS,kBAACC,EAAA,EAAD,MAAU9B,MAAM,WAC1D,kBAAC4B,EAAA,EAAD,CAAkBpC,MAAM,OAAOqC,QAAS,kBAACC,EAAA,EAAD,MAAU9B,MAAM,SACxD,kBAAC4B,EAAA,EAAD,CAAkBpC,MAAM,QAAQqC,QAAS,kBAACC,EAAA,EAAD,MAAU9B,MAAM,a,uCCJtE,SAAS+B,EAAIzC,GAIhB,OACI,kBAACI,EAAA,EAAD,CAAMC,MAAI,EAACC,MAAO,CAACC,QAAS,SACxB,kBAACmC,EAAA,EAAD,CACI9B,QAAQ,YACR+B,MAAM,UACNC,QAAS,kBAAC,IAAD,MACTC,QATG,WACXC,QAAQC,IAAI/C,EAAMgD,kBAId,SCkCGC,MAhDf,WAGI,MAAwBhD,mBAAS,IAAjC,mBAAOkC,EAAP,KAAae,EAAb,KACA,EAA8BjD,mBAAS,IAAvC,mBAAOkD,EAAP,KAAgBC,EAAhB,KACA,EAA8BnD,mBAAS,IAAvC,mBAAOoD,EAAP,KAAgBC,EAAhB,KACA,EAAgCrD,mBAAsB,MAAtD,mBAAOsD,EAAP,KAAiBC,EAAjB,KACA,EAA2BvD,mBAAS,UAApC,mBAAOwD,EAAP,KAAeC,EAAf,KACA,EAA6BzD,mBAAS,IAAtC,mBAAO0D,EAAP,KAAgBC,EAAhB,KACA,EAAyB3D,mBAAS,IAAlC,mBAAO4D,EAAP,KAAcC,EAAd,KAEMd,EAAiB,CACnBb,OACAgB,UACAE,UACCE,WACDE,SACAE,UACAE,SAGJ,OACI,6BACI,kBAACE,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAAC5D,EAAA,EAAD,CAAM6D,WAAS,GACX,kBAAClE,EAAD,CAAOW,MAAO,YAAaM,UAAWkC,IACtC,kBAACnD,EAAD,CAAOW,MAAO,eAAgBM,UAAWoC,KAE7C,kBAAChD,EAAA,EAAD,CAAM6D,WAAS,EACTC,UAAU,SACVC,eAAe,SACfC,WAAW,cACb,kBAACrE,EAAD,CAAOW,MAAO,eAAgBM,UAAWsC,IACzC,kBAACrC,EAAD,CAAUP,MAAO,WAAYM,UAAWwC,IACxC,kBAAC3B,EAAD,CAAQb,UAAW0C,IACP,WAAXD,EACG,kBAAC1D,EAAD,CAAOW,MAAO,eAAgBM,UAAW4C,IACzC,kBAAC7D,EAAD,CAAOW,MAAO,aAAcM,UAAW8C,IAC3C,kBAACrB,EAAD,CAAKO,eAAgBA,QClCrBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDsI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,a","file":"static/js/main.c865571b.chunk.js","sourcesContent":["import {TextField} from \"@material-ui/core\";\r\nimport React, {useRef, useState, RefObject, ChangeEvent} from \"react\";\r\nimport {Container, Grid} from '@material-ui/core';\r\n\r\ntype PropsType = {\r\n    label?: string\r\n    setChange:(value:string)=>void\r\n}\r\n\r\n\r\nexport function Input(props: PropsType) {\r\n    const [value, setValue] = useState('')\r\n    const ChangeValue = (e:ChangeEvent<HTMLInputElement | HTMLTextAreaElement>)=>{\r\n        setValue(e.currentTarget.value)\r\n        props.setChange(e.currentTarget.value)\r\n    }\r\n    // const inputRef = useRef<HTMLInputElement>(null)\r\n    // const SendData = ()=>{\r\n    //\r\n    //     const el = inputRef.current as HTMLInputElement\r\n    //     const inp = el.children[1].children[0]\r\n    //\r\n    //     console.log(el.value)\r\n    //     // console.log(el.value)\r\n    // }\r\n    return (\r\n        <Grid item style={{padding:'20px'}}>\r\n            <TextField\r\n                // ref={inputRef}\r\n                required\r\n                label={props.label}\r\n                defaultValue=\"\"\r\n                variant=\"outlined\"\r\n                value = {value}\r\n                onChange={ChangeValue}\r\n            />\r\n\r\n        </Grid>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {KeyboardDatePicker, MuiPickersUtilsProvider} from \"@material-ui/pickers\";\r\nimport DateFnsUtils from \"@date-io/date-fns\";\r\nimport {Grid} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    label?: string\r\n    setChange:(value:Date | null)=>void\r\n}\r\n\r\nexport function Birthday(props: PropsType) {\r\n\r\n    const [selectedDate, setSelectedDate] = React.useState<Date | null>(\r\n        new Date('2014-08-18T21:11:54'),\r\n    );\r\n\r\n    const handleDateChange = (date: Date | null) => {\r\n        setSelectedDate(date);\r\n        props.setChange(selectedDate)\r\n    };\r\n    return (\r\n        <Grid item style={{padding:'20px'}}>\r\n            <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                <KeyboardDatePicker\r\n                    margin=\"normal\"\r\n                    id=\"date-picker-dialog\"\r\n                    label={props.label}\r\n                    format=\"MM/dd/yyyy\"\r\n                    value={selectedDate}\r\n                    onChange={handleDateChange}\r\n                    KeyboardButtonProps={{\r\n                        'aria-label': 'change date',\r\n                    }}\r\n                />\r\n            </MuiPickersUtilsProvider>\r\n        </Grid>\r\n\r\n    )\r\n}","import React from \"react\";\r\nimport {FormControl, FormControlLabel, FormLabel, Grid, Radio, RadioGroup} from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n    setChange: (value:string)=>void\r\n}\r\nexport function Gender(props:PropsType) {\r\n    const [value, setValue] = React.useState('female');\r\n\r\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setValue((event.target as HTMLInputElement).value);\r\n        props.setChange(event.currentTarget.value)\r\n    };\r\n    return (\r\n        <Grid item style={{padding:'20px'}}>\r\n            <FormControl component=\"fieldset\">\r\n                <FormLabel component=\"legend\">Gender</FormLabel>\r\n                <RadioGroup aria-label=\"gender\" name=\"gender1\" value={value} onChange={handleChange}>\r\n                    <FormControlLabel value=\"female\" control={<Radio/>} label=\"Female\"/>\r\n                    <FormControlLabel value=\"male\" control={<Radio/>} label=\"Male\"/>\r\n                    <FormControlLabel value=\"other\" control={<Radio/>} label=\"Other\"/>\r\n                </RadioGroup>\r\n            </FormControl>\r\n        </Grid>\r\n\r\n    )\r\n\r\n\r\n}","import {Grid} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport SendIcon from \"@material-ui/icons/Send\";\r\nimport React from \"react\";\r\n\r\ntype PropsType={\r\n    DataConsoleLog:{\r\n        name:string\r\n        surname:string\r\n        company: string,\r\n        birthday: Date | null,\r\n        gender:string,\r\n        serials:string,\r\n        hobby:string\r\n    }\r\n}\r\nexport function Btn(props:PropsType) {\r\n    const sendData=()=>{\r\n        console.log(props.DataConsoleLog)\r\n    }\r\n    return (\r\n        <Grid item style={{padding: '20px'}}>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                endIcon={<SendIcon/>}\r\n                onClick={sendData}\r\n            >\r\n                Send\r\n            </Button>\r\n        </Grid>\r\n\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport 'date-fns';\r\nimport {Input} from \"./Input\";\r\nimport {Birthday} from \"./Birthday\";\r\nimport {Gender} from \"./Gender\";\r\nimport {Container, Grid} from '@material-ui/core';\r\nimport {Btn} from \"./Btn\";\r\n\r\nfunction App() {\r\n\r\n\r\n    const [name, setName] = useState('')\r\n    const [surname, setSurname] = useState('')\r\n    const [company, setCompany] = useState('')\r\n    const [birthday, setBirthday] = useState<Date | null>(null)\r\n    const [gender, setGender]= useState('female')\r\n    const [serials, setSerials]= useState('')\r\n    const [hobby, setHobby]= useState('')\r\n\r\n    const DataConsoleLog = {\r\n        name,\r\n        surname,\r\n        company,\r\n         birthday,\r\n        gender,\r\n        serials,\r\n        hobby\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Container fixed>\r\n                <Grid container >\r\n                    <Input label={'Your name'} setChange={setName}/>\r\n                    <Input label={'Your surname'} setChange={setSurname} />\r\n                </Grid>\r\n                <Grid container\r\n                      direction=\"column\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"flex-start\">\r\n                    <Input label={'Your company'} setChange={setCompany}/>\r\n                    <Birthday label={'Birthday'} setChange={setBirthday}/>\r\n                    <Gender setChange={setGender}/>\r\n                    {gender === 'female' ?\r\n                        <Input label={'Your serials'} setChange={setSerials}/> :\r\n                        <Input label={'Your hobby'} setChange={setHobby}/>}\r\n                    <Btn DataConsoleLog={DataConsoleLog}/>\r\n                </Grid>\r\n\r\n\r\n            </Container>\r\n\r\n        </div>\r\n\r\n    );\r\n}\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}